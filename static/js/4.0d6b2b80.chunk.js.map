{"version":3,"sources":["Style/gialogs/Dialogs.module.css","Components/dialogs/Dialogs.js","Components/dialogs/DialogsContainer.js"],"names":["module","exports","maxLength","maxLengthCreator","Dialogs","React","memo","props","dialogsArray","map","d","name","id","messagesElement","m","message","newMessageBody","className","dm","dialogModule","dialogsItem","messages","addMessage","InputMessageReduxForm","onSubmit","formData","onSendMessageClick","reduxForm","form","handleSubmit","Field","placeholder","component","Textarea","validate","requiredField","DialogItem","dialog","dialogsImg","src","dialogsName","to","Message","DialogsAPI","txt","sendMessage","this","ollMess","messagesArray","Component","mapStateToProps","state","messagesPage","objectDispatchToProps","sendMessageCreator","compose","connect","withAuthRedirect"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,aAAe,8BAA8B,YAAc,6BAA6B,OAAS,wBAAwB,WAAa,4BAA4B,YAAc,6BAA6B,SAAW,0BAA0B,QAAU,yBAAyB,WAAa,8B,gLCMhTC,EAAaC,YAAiB,IAG5BC,EAAUC,IAAMC,MAAK,SAACC,GAMxB,IAAIC,EAAe,YAAID,EAAMC,cAAcC,KAAI,SAAAC,GAAC,OAAI,cAAC,EAAD,CAAYC,KAAOD,EAAEC,KAAMC,GAAIF,EAAEE,IAAUF,EAAEE,OAC7FC,EAAkB,YAAIN,EAAMM,iBAAiBJ,KAAI,SAAAK,GAAC,OAAK,cAAC,EAAD,CAASC,QAASD,EAAEC,SAAeD,EAAEF,OAC1EL,EAAMS,eAI5B,OACI,sBAAKC,UAAWC,IAAGC,aAAnB,UACQ,qBAAKF,UAAWC,IAAGE,YAAnB,SACKZ,IAEL,sBAAKS,UAAWC,IAAGG,SAAnB,UACI,8BAAMR,IACN,qBAAKI,UAAWC,IAAGI,WAAnB,SACI,cAACC,EAAD,CAAwBC,SAV3B,SAACC,GAAalB,EAAMmB,mBAAmBD,EAASV,uBA4B/DQ,EAAwBI,YAAU,CAEpCC,KAAM,WAFoBD,EAZL,SAACpB,GACtB,OAAO,uBAAMiB,SAAUjB,EAAMsB,aAAtB,UACH,8BACI,cAACC,EAAA,EAAD,CAAQC,YAAa,OAAQpB,KAAM,UAAWqB,UAAWC,IACjDC,SAAU,CAACC,IAAejC,OAEtC,wDAoDFkC,EAAa,SAAC7B,GAChB,OACI,sBAAKU,UAAWC,IAAGmB,OAAnB,UACI,qBAAKpB,UAAWC,IAAGoB,WAAnB,SACI,qBAAKC,IAAI,sFAEb,qBAAKtB,UAAWC,IAAGsB,YAAnB,SACI,eAAC,IAAD,CAASC,GAAI,aAAelC,EAAMK,GAAlC,UAAuCL,EAAMI,KAA7C,aAMV+B,EAAU,SAACnC,GAAW,OAAO,qBAAKU,UAAWC,IAAGH,QAAnB,SAA6BR,EAAMQ,WAEvDX,I,uBCrGTuC,E,4MACFjB,mBAAoB,SAACkB,GAAQ,EAAKrC,MAAMsC,YAAYD,I,4CAEpD,WACI,OAAQ,cAAC,EAAD,CAASlB,mBAAoBoB,KAAKpB,mBACzBV,eAAiB8B,KAAKvC,MAAMwC,QAAQ/B,eACpCR,aAAgBsC,KAAKvC,MAAMwC,QAAQvC,aACnCK,gBAAkBiC,KAAKvC,MAAMwC,QAAQC,oB,GAPrC3C,IAAM4C,WAY3BC,EAAkB,SAACC,GAAU,MAAO,CAAEJ,QAASI,EAAMC,eAErDC,EAAwB,CAACR,YAAaS,KAE1CC,YACIC,YAAQN,EAAiBG,GACzBI,IAFJF,CAGEZ,GAYaY,sBACXC,YAAQN,EAAiBG,GACzBI,IAFWF,CAGbZ","file":"static/js/4.0d6b2b80.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogModule\":\"Dialogs_dialogModule__16imf\",\"dialogsItem\":\"Dialogs_dialogsItem__1v4VV\",\"dialog\":\"Dialogs_dialog__cwf6g\",\"dialogsImg\":\"Dialogs_dialogsImg__1BztC\",\"dialogsName\":\"Dialogs_dialogsName__11W0r\",\"messages\":\"Dialogs_messages__1dzFA\",\"message\":\"Dialogs_message__2y9Q7\",\"addMessage\":\"Dialogs_addMessage__2fn7x\"};","import React from 'react'\r\nimport dm from '../../Style/gialogs/Dialogs.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {Textarea} from \"../../basket/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, requiredField} from \"../../basket/validators/validators\";\r\n\r\nlet maxLength =  maxLengthCreator(50);\r\n\r\n\r\nconst Dialogs = React.memo((props) => {\r\n    // reverse() - мутирующая функция (нарушает имьютабильность), идя того, что бы не менять даные в global state\r\n    // использовать нужно капию массива[...props.array].reverse() - мутирующая\r\n    // let dialogsArray = [...props.dialogsArray].reverse().map(d => <DialogItem name= {d.name} id={d.id} key ={d.id}/>);\r\n    // let messagesElement = [...props.messagesElement].reverse().map(m =>  <Message message={m.message} key ={m.id}/> );\r\n\r\n    let dialogsArray = [...props.dialogsArray].map(d => <DialogItem name= {d.name} id={d.id} key ={d.id}/>);\r\n    let messagesElement = [...props.messagesElement].map(m =>  <Message message={m.message} key ={m.id}/> );\r\n    let newMessageBody =  props.newMessageBody;\r\n\r\n    const onSubmit = (formData) =>{props.onSendMessageClick(formData.message);};\r\n\r\n    return (\r\n        <div className={dm.dialogModule}>\r\n                <div className={dm.dialogsItem}>\r\n                    {dialogsArray}\r\n                </div>\r\n                <div className={dm.messages}>\r\n                    <div>{messagesElement}</div>\r\n                    <div className={dm.addMessage}>\r\n                        <InputMessageReduxForm  onSubmit={onSubmit}/>\r\n                    </div>\r\n                </div>\r\n            </div>)\r\n});\r\n\r\nconst InputTextMessage = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n            <Field  placeholder={\"Text\"} name={\"message\"} component={Textarea}\r\n                    validate={[requiredField, maxLength]}/>\r\n        </div>\r\n        <button>\r\n            Send Message\r\n        </button>\r\n    </form>\r\n};\r\n\r\nconst InputMessageReduxForm = reduxForm({\r\n    // a unique name for the form\r\n    form: 'message'\r\n})(InputTextMessage)\r\n\r\n\r\n\r\n// Презентационная (функциональная) компонента\r\nconst  Dialogs1 = (props) => {\r\n    let dialogsArray = props.ollMess.dialogsArray.map(d => <DialogItem name= {d.name} id={d.id} key ={d.id}/>);\r\n    let messagesElement = props.ollMess.messagesArray.map(m =>  <Message message={m.message} key ={m.id}/> );\r\n    let newMessageBody =  props.ollMess.newMessageBody;\r\n\r\n    let onSendMessageClick = ()=> {\r\n        props.sendMessage();\r\n        // props.dispatch(sendMessageCreator())\r\n    };\r\n\r\n    let newMessageElement = (e) =>{\r\n        let body = e.target.value;\r\n        props.updateNewMesBody(body);\r\n        // props.dispatch(updateNewMessageTexeCreator(body));\r\n    };\r\n\r\n    return (\r\n        <div className={dm.dialogModule}>\r\n            <div className={dm.dialogsItem}>\r\n                {dialogsArray}\r\n            </div>\r\n            <div className={dm.messages}>\r\n                <div>{messagesElement}</div>\r\n                <div className={dm.addMessage}>\r\n                    <div>\r\n                        <textarea value={newMessageBody}\r\n                                  onChange={newMessageElement}\r\n                                  placeholder='Enter your message'></textarea>\r\n                    </div>\r\n                    <div>\r\n                        <button onClick={onSendMessageClick}>Send Message</button>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n\r\n}\r\n\r\nconst DialogItem = (props) => {\r\n    return (\r\n        <div className={dm.dialog}>\r\n            <div className={dm.dialogsImg}>\r\n                <img src='https://img1.badfon.ru/original/960x800/3/dc/enn-heteuey-anne-hathaway-7419.jpg'/>\r\n            </div>\r\n            <div className={dm.dialogsName}>\r\n                <NavLink to={'/dialogs/d' + props.id}>{props.name} </NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst Message = (props) => {return <div className={dm.message}>{props.message}</div>};\r\n\r\nexport default Dialogs","import React from 'react'\r\nimport {sendMessageCreator} from \"../../redux/reducers/dialogs-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/AuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass DialogsAPI extends React.Component{\r\n    onSendMessageClick =(txt)=> {this.props.sendMessage(txt);};\r\n\r\n    render() {\r\n        return (<Dialogs onSendMessageClick={this.onSendMessageClick}\r\n                         newMessageBody ={this.props.ollMess.newMessageBody}\r\n                         dialogsArray = {this.props.ollMess.dialogsArray}\r\n                         messagesElement ={this.props.ollMess.messagesArray}\r\n        />)\r\n    }\r\n};\r\n\r\nlet mapStateToProps = (state) =>{return { ollMess: state.messagesPage}};\r\n\r\nlet objectDispatchToProps = {sendMessage: sendMessageCreator};\r\n\r\ncompose(\r\n    connect(mapStateToProps, objectDispatchToProps),\r\n    withAuthRedirect\r\n)(DialogsAPI);\r\n\r\n\r\n// // HOC хок для проверки подкиски\r\n// let AuthRedirectComponent = withAuthRedirect(DialogsAPI);\r\n// //Контейнерная компанента для през.Компаненты (функциональная) Dialogs\r\n// const DialogsContainer = connect(mapStateToProps, objectDispatchToProps)(AuthRedirectComponent);\r\n// export default DialogsContainer\r\n\r\n\r\n//функция, которая принимает во (1,2)(DialogsAPI)\r\n// и затем с ней выполняет функции из 2->1 из (1,2)(DialogsAPI)\r\nexport default compose(\r\n    connect(mapStateToProps, objectDispatchToProps),\r\n    withAuthRedirect\r\n)(DialogsAPI);\r\n\r\n"],"sourceRoot":""}